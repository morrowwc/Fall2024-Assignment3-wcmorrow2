@using Newtonsoft.Json;

@model Fall2024_Assignment3_wcmorrow2.Models.ActorDetailsViewModel

@{
    ViewData["Title"] = "Details";
}

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <div class="m-0 font-weight-bold text-primary">
            <h1 class="m-0 font-weight-bold text-primary">Details</h1>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="card border-left-primary shadow h-100 py-2">
                    <div class="card-body">
                        <h4s>@Html.DisplayFor(model => model.Value.Name)</h4>
                        <hr />
                        <dl class="row">
                            <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Value.Gender)</dt>
                            <dd class="col-sm-8">@Html.DisplayFor(model => model.Value.Gender)</dd>

                            <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Value.DoB)</dt>
                            <dd class="col-sm-8">@Html.DisplayFor(model => model.Value.DoB)</dd>
                                @if (Model.Value.DoD != null)
                                {
                                    <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Value.DoD)</dt>
                                    <dd class="col-sm-8">@Html.DisplayFor(model => model.Value.DoD)</dd>
                                }

                            <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Value.IMDBlink)</dt>
                            <dd class="col-sm-8"><a href="@Html.DisplayFor(model => model.Value.IMDBlink)"> @Html.DisplayFor(model => model.Value.IMDBlink)</a></dd>

                            <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Value.Media)</dt>
                            <dd class="col-sm-8">
                                @if (Model.Value.Media != null)
                                {
                                    var base64 = Convert.ToBase64String(Model.Value.Media);
                                    var imgSrc = string.Format("data:image/jpg;base64,{0}", base64);
                                        <img src="@imgSrc" height="100" style="border-radius:3%; object-fit: cover" />
                                }
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>

            <div class="col-md-8">
                <h4>Movies</h4>
                <div class="row">
                    @foreach (var movie in Model.Movies)
                    {
                        <div class="col-xl-6 col-md-6 mb-4">
                            <div class="card border-left-primary shadow h-100 py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-4">
                                            <div class="h5 mb-0 font-weight-bold text-gray-800">@movie.Title</div>
                                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                                <a asp-action="Details" asp-controller="Movies" asp-route-id="@movie.Id">Details</a>
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            @if (movie.Media != null)
                                            {
                                                var base64 = Convert.ToBase64String(movie.Media);
                                                var imgSrc = string.Format("data:image/jpg;base64,{0}", base64);
                                                <img src="@imgSrc" height="100" style="border-radius:3%; object-fit: cover" />
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <div class="m-0 font-weight-bold text-primary">
                    Total Sentiment Analysis
                </div>
            </div>
            <div class="card-body">
                @{
                    var defaultSentiment = new VaderSharp2.SentimentAnalysisResults();
                    string defaultSentimentJson = JsonConvert.SerializeObject(defaultSentiment);
                    dynamic sumScore = JsonConvert.DeserializeObject(Model.Value.SentimentSum ?? defaultSentimentJson);
                }
                <p><strong>Compound</strong>: @sumScore.Compound.ToString()</p>
                <p><strong>Positive</strong>: @sumScore.Positive.ToString()</p>
                <p><strong>Neutral</strong>: @sumScore.Neutral.ToString()</p>
                <p><strong>Negative</strong>: @sumScore.Negative.ToString()</p>
            </div>
        </div>

        <table class="table mt-4">
            <thead>
                <tr>
                    <th>Review</th>
                    <th>Sentiment</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var review in Model.Value.Reviews)
                {
                    dynamic tweetData = JsonConvert.DeserializeObject(review.Content);
                    dynamic score = JsonConvert.DeserializeObject(review.SentimentScore);
                    <tr>
                        @try
                        {
                            <td>
                                <p><strong>@tweetData.user.name (@tweetData.user.screen_name)</strong></p>
                                <p>@tweetData.text</p>
                                <div><small>Created at: @tweetData.created_at</small></div>
                                <div><small>Followers: @tweetData.user.followers_count</small></div>
                                <div><small>Retweets: @tweetData.retweet_count | Likes: @tweetData.favorite_count</small></div>
                            </td>
                            <td>
                                <div>Compound : @score.Compound.ToString()</div>
                                <div>Positive : @score.Positive.ToString()</div>
                                <div>Neutral : @score.Neutral.ToString()</div>
                                <div>Negative : @score.Negative.ToString()</div>
                            </td>
                        }
                        catch
                        {
                            <td>Invalid Review Format</td>
                            <td>Please Delete</td>
                        }
                        <td>
                            <form asp-action="DeleteReview" method="post">
                                <input type="hidden" name="id" value="@review.Id" />
                                <button type="submit" class="btn btn-danger">Delete</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <a asp-action="GenerateReview" asp-route-id="@Model.Value?.Id" class="btn btn-primary">New Review</a>

    </div>
</div>

<div>
    <a asp-action="Edit" asp-route-id="@Model.Value?.Id" class="btn btn-primary">Edit</a>
    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
</div>
